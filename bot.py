# -*- coding: utf-8 -*-
import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import secrets
import string

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = "8365124344:AAHlMzG3xIGLEEOt_G3OH4W3MFrBHawNuSY"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            phone TEXT UNIQUE,
            personal_code TEXT UNIQUE,
            student_name TEXT,
            group_id INTEGER,
            balance REAL DEFAULT 0,
            is_verified BOOLEAN DEFAULT FALSE
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –≥—Ä—É–ø–ø
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS groups (
            group_id INTEGER PRIMARY KEY,
            group_name TEXT,
            teacher TEXT,
            schedule_data TEXT
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–Ω—è—Ç–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS lessons (
            lesson_id INTEGER PRIMARY KEY,
            group_id INTEGER,
            lesson_date TEXT,
            lesson_time TEXT,
            classroom TEXT,
            teacher TEXT,
            status TEXT DEFAULT 'scheduled'
        )
    ''')
    
    conn.commit()
    conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_personal_code():
    return ''.join(secrets.choice(string.digits) for _ in range(6))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def is_authenticated(user_id):
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT is_verified FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0]

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞
    welcome_text = """
üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä "–í –¥–≤–∞ —Å—á—ë—Ç–∞"!*

ü§ñ *–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:*

üìÖ *–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ*
‚Ä¢ –ö–∞–∫–∞—è —É –≤–∞—Å –≥—Ä—É–ø–ø–∞
‚Ä¢ –í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–∏–π  
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö

üí≥ *–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã*
‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π

üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*
‚Ä¢ –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ –£—á–µ–±–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å

üí¨ *–û–±—â–µ–Ω–∏–µ*
‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã —à–∫–æ–ª—ã
‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–ø–ø–æ–π

üîê *–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è*
    """
    
    if is_authenticated(user_id):
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
        await show_main_menu(update, context)
    else:
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
        await show_auth_menu(update, context)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üÜò *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*

üìÖ *–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è* - –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
üí≥ *–ë–∞–ª–∞–Ω—Å –∏ –æ–ø–ª–∞—Ç–∞* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –∏ –æ–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π
üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç* - –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
üí¨ *–ß–∞—Ç —à–∫–æ–ª—ã* - –ø–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Ç—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è

*–°–ø–æ—Å–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:*
üì± *–ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞* - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
üîê *–ü–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É* - –∫–æ–¥, –≤—ã–¥–∞–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–º —Ü–µ–Ω—Ç—Ä–æ–º

*–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–æ–¥
‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —É—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def show_auth_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
        [KeyboardButton("üîê –í–≤–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    await update.message.reply_text(
        "üîê *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:*\n\n"
        "üì± *–ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞* - –µ—Å–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ\n"
        "üîê *–ü–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É* - –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞–ª–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è", "üí≥ –ë–∞–ª–∞–Ω—Å –∏ –æ–ø–ª–∞—Ç–∞"],
        ["üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üí¨ –ß–∞—Ç —à–∫–æ–ª—ã"],
        ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üÜò –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    await update.message.reply_text(
        "üéØ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:\n\n"
        "üìÖ *–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è* - –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "üí≥ *–ë–∞–ª–∞–Ω—Å –∏ –æ–ø–ª–∞—Ç–∞* - —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"  
        "üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç* - –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n"
        "üí¨ *–ß–∞—Ç —à–∫–æ–ª—ã* - –æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º\n"
        "üîÑ *–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ* - –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "üÜò *–ü–æ–º–æ—â—å* - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.contact:
        phone = update.message.contact.phone_number
        user_id = update.effective_user.id
        
        conn = sqlite3.connect('school_bot.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
        cursor.execute('SELECT * FROM users WHERE phone = ?', (phone,))
        user = cursor.fetchone()
        
        if user:
            # –û–±–Ω–æ–≤–ª—è–µ–º user_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('UPDATE users SET user_id = ?, is_verified = TRUE WHERE phone = ?', 
                         (user_id, phone))
            await update.message.reply_text("‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*", parse_mode='Markdown')
            await show_main_menu(update, context)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            personal_code = generate_personal_code()
            cursor.execute(
                'INSERT INTO users (user_id, phone, personal_code, is_verified) VALUES (?, ?, ?, TRUE)',
                (user_id, phone, personal_code)
            )
            await update.message.reply_text(
                f"‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n"
                f"üîê *–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥:* `{personal_code}`\n"
                f"üìù *–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –≤—Ö–æ–¥–æ–≤*",
                parse_mode='Markdown'
            )
            await show_main_menu(update, context)
        
        conn.commit()
        conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
async def handle_personal_code_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–¥–∞
    context.user_data['waiting_for_code'] = True
    await update.message.reply_text(
        "üî¢ *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥:*\n\n"
        "–ö–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 —Ü–∏—Ñ—Ä –∏ –±—ã–ª –≤—ã–¥–∞–Ω –≤–∞–º –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —É—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
        parse_mode='Markdown'
    )

async def verify_personal_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE personal_code = ?', (code,))
    user = cursor.fetchone()
    
    if user:
        cursor.execute('UPDATE users SET user_id = ?, is_verified = TRUE WHERE personal_code = ?', 
                     (user_id, code))
        await update.message.reply_text("‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*", parse_mode='Markdown')
        await show_main_menu(update, context)
    else:
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —É—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä.",
            parse_mode='Markdown'
        )
    
    conn.commit()
    conn.close()
    context.user_data['waiting_for_code'] = False

# –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è
async def show_upcoming_lessons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authenticated(update.effective_user.id):
        await show_auth_menu(update, context)
        return
    
    user_id = update.effective_user.id
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –∑–∞–Ω—è—Ç–∏—è—Ö
    cursor.execute('''
        SELECT u.group_id, g.group_name, l.lesson_date, l.lesson_time, 
               l.classroom, l.teacher, l.status
        FROM users u
        LEFT JOIN groups g ON u.group_id = g.group_id
        LEFT JOIN lessons l ON u.group_id = l.group_id
        WHERE u.user_id = ? AND l.lesson_date >= date('now')
        ORDER BY l.lesson_date, l.lesson_time
        LIMIT 5
    ''', (user_id,))
    
    lessons = cursor.fetchall()
    conn.close()
    
    if lessons:
        response = "üìÖ *–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è:*\n\n"
        for lesson in lessons:
            group_id, group_name, date, time, classroom, teacher, status = lesson
            response += f"üéØ *–ì—Ä—É–ø–ø–∞:* {group_name}\n"
            response += f"‚è∞ *–í—Ä–µ–º—è:* {date} –≤ {time}\n"
            response += f"üè´ *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {classroom}\n"
            response += f"üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* {teacher}\n"
            response += f"üìä *–°—Ç–∞—Ç—É—Å:* {status}\n"
            response += "‚îÄ" * 30 + "\n"
        
        response += "\nüîÑ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\""
    else:
        response = "‚ùå *–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —É—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
    
    await update.message.reply_text(response, parse_mode='Markdown')

# –ë–∞–ª–∞–Ω—Å –∏ –æ–ø–ª–∞—Ç–∞
async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authenticated(update.effective_user.id):
        await show_auth_menu(update, context)
        return
    
    user_id = update.effective_user.id
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    balance = cursor.fetchone()
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url="https://example.com/payment")],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üí∞ *–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* {balance[0] if balance else 0} —Ä—É–±.\n\n"
        "üí° *–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:*",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authenticated(update.effective_user.id):
        await show_auth_menu(update, context)
        return
    
    user_id = update.effective_user.id
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT u.student_name, u.phone, u.balance, g.group_name, u.personal_code
        FROM users u
        LEFT JOIN groups g ON u.group_id = g.group_id
        WHERE u.user_id = ?
    ''', (user_id,))
    
    user_data = cursor.fetchone()
    conn.close()
    
    if user_data:
        name, phone, balance, group_name, personal_code = user_data
        response = "üë§ *–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:*\n\n"
        response += f"üìõ *–ò–º—è:* {name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        response += f"üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
        response += f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance} —Ä—É–±.\n"
        response += f"üéØ *–ì—Ä—É–ø–ø–∞:* {group_name or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}\n"
        response += f"üîê *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥:* `{personal_code}`\n\n"
        response += "üí° *–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –±—É–¥—É—â–∏—Ö –≤—Ö–æ–¥–æ–≤*"
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url="https://example.com/payment")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(response, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text("‚ùå *–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*", parse_mode='Markdown')

# –ß–∞—Ç —à–∫–æ–ª—ã
async def show_school_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí¨ –û–±—â–∏–π —á–∞—Ç —à–∫–æ–ª—ã", url="https://t.me/your_school_chat")],
        [InlineKeyboardButton("üìö –ß–∞—Ç –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã", url="https://t.me/your_group_chat")],
        [InlineKeyboardButton("üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/your_support_chat")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üí¨ *–ß–∞—Ç—ã —É—á–µ–±–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è:\n\n"
        "üí¨ *–û–±—â–∏–π —á–∞—Ç —à–∫–æ–ª—ã* - –æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —É—á–µ–Ω–∏–∫–∞–º–∏\n"
        "üìö *–ß–∞—Ç –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã* - –æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø–æ–π\n"
        "üìû *–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞* - –ø–æ–º–æ—â—å –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–¥–∞
    if context.user_data.get('waiting_for_code'):
        await verify_personal_code(update, context)
        return
    
    # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not is_authenticated(user_id):
        if text == "üîê –í–≤–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞":
            await handle_personal_code_input(update, context)
        else:
            await show_auth_menu(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if text == "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è":
        await show_upcoming_lessons(update, context)
    elif text == "üí≥ –ë–∞–ª–∞–Ω—Å –∏ –æ–ø–ª–∞—Ç–∞":
        await show_balance(update, context)
    elif text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
        await show_profile(update, context)
    elif text == "üí¨ –ß–∞—Ç —à–∫–æ–ª—ã":
        await show_school_chat(update, context)
    elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await update.message.reply_text("‚úÖ *–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*", parse_mode='Markdown')
    elif text == "üÜò –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "üîê –í–≤–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞":
        await handle_personal_code_input(update, context)
    else:
        await update.message.reply_text(
            "ü§î *–ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
            parse_mode='Markdown'
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()
    
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    application.run_polling()

if __name__ == '__main__':
    main()